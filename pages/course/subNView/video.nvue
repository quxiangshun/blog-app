<template>
	<view>
		<!-- 状态栏高度，是为了显示状态栏 -->
		<view :style="{height: statusBarHeight + 'rpx'}"></view>

		<!-- poster:主图地址 -->
		<video ref="video" class="video" :controls="false" :show-fullscreen-btn="false" :show-center-play-btn="false"
			:show-progress="false" :poster="videoMidea.mainImage" :src="videoMidea.videoUrl" @ended="nextPlay"
			@timeupdate="timeupdate">

			<!-- 后退和标题 -->
			<cover-view v-if="showControls" class="control-top row">
				<text class="iconfont" @click.stop="backHandler">&#xe679;</text>
				<text class="title">{{videoMidea.title}}</text>
			</cover-view>

			<!-- 中间暂停和播放按钮 -->
			<cover-view class="control-center center" @click="showHideControls()">
				<text v-if="showControls && !play" class="stop iconfont" @click.stop="playVideo">&#xe625;</text>
			</cover-view>

			<!-- 底部区域 -->
			<cover-view v-if="showControls" class="control-bottom row center" :style="{width: `${controlsWidth}px`}">
				<!-- 播放、暂停、下一节 -->
				<view class="row">
					<!-- 播放 -->
					<text v-if="!play" class="video-btn iconfont" @click.stop="playVideo">&#xe625;</text>
					<!-- 暂停 -->
					<text v-else class="video-btn iconfont" @click.stop="playVideo">&#xe62c;</text>
					<!-- 下一节 -->
					<text class="video-btn iconfont" @click.stop="nextPlay">&#xe61b;</text>
				</view>
				<!-- 当前播放时长 -->
				<text class="time">{{currentStr}}</text>
				<!-- 进度条 -->
				<view class="bottom-slider">
					<slider-bar :duration="duration" :current="current" :sliderWidth="sliderWidth"
						:direction="fullScreen ? 'screenY' : 'screenX'" :rate="parseFloat(currentRate)"
						@change="change"></slider-bar>
				</view>
				<!-- 总时长 -->
				<text class="time">{{durationStr}}</text>
				<!-- 倍速、全屏 -->
				<view class="row center">
					<!-- 倍速 -->
					<text class="video-btn" @click="showHideRateView">{{currentRate}}x</text>
					<!-- 全屏 -->
					<text v-if="!fullScreen" class="iconfont" @click.stop="fullScreenHandler">&#xe623;</text>
					<text v-else class="iconfont" @click.stop="fullScreenHandler">&#xe61e;</text>
				</view>
			</cover-view>

			<!-- 倍速非全屏rate-list、rate-item   倍速全屏rate-list-full、rate-item-full -->
			<cover-view v-if="rateView" class="center" :class="fullScreen ? 'rate-list-full' : 'rate-list'">
				<text :class="{'rate-item-full': fullScreen, 'rate-item': !fullScreen, 'active': rate === currentRate}"
					v-for="(rate, index) in rates" :key="index" @click.stop="clickRate(rate)">{{rate}}x</text>
			</cover-view>
		</video>
	</view>
</template>

<script>
	import sliderBar from './components/slider-bar.nvue'
	let videoContext = null // 媒体实例
	let timer = null // 定时器对象
	export default {
		components: {
			sliderBar
		},
		data() {
			return {
				statusBarHeight: 0,
				videoMidea: {
					id: null,
					title: '',
					mainImage: '',
					videoUrl: '',
				},
				play: false, // 正在播放
				showControls: true, // 显示空间按钮
				duration: 60, // 当前视频总时长（单位秒s）
				current: 0, // 当前播放时长（单位秒）
				fullScreen: false, // 是否全屏
				controlsHeight: 0, // 控制层占用高度
				controlsWidth: 0, // 控制层占用宽度
				rates: ['0.8', '1.0', '1.25', '1.5', '2.0'],
				currentRate: '1.0', // 当前倍速
				rateView: false, // 显示隐藏倍速窗口
				chapterList: [], // 课程章节列表
				activeObj: { // 列表选中的下标
					chapterIndex: 0,
					sectionIndex: 0
				}
			}
		},
		onLoad() {
			const info = uni.getSystemInfoSync();
			this.statusBarHeight = info.statusBarHeight
			this.controlsHeight = info.screenHeight
			this.controlsWidth = info.screenWidth

			// 监听其他页面传递的数据
			uni.$on('video', this.videoHandlerEvent)

		},
		// 卸载页面会触发此方法
		onUnload() {
			// 卸载页面时，移除监听事件
			uni.$off('video')
		},
		beforeCreate() {
			// 引入图标
			const domModule = uni.requireNativePlugin('dom')
			domModule.addRule('fontFace', {
				'fontFamily': "iconfont",
				// 'src': "url('http://at.alicdn.com/t/font_2234252_v3hj1klw6k9.ttf')"
				'src': "url('~@/static/icon/iconfont.ttf')"
			});
		},
		mounted() {
			// 获取媒体实例，不能使用uni.createAudioContext,在nvue文件中无效
			videoContext = this.$refs.video
			// console.log(videoContext)
		},
		computed: {
			durationStr() {
				return this.formatSeconds(this.duration)
			},
			currentStr() {
				return this.formatSeconds(this.current)
			},
			sliderWidth() {
				// rpx 转 px 320：4个按钮宽度 220：是两个时间宽度
				return this.controlsWidth - uni.upx2px(540)
			}
		},
		watch: {
			fullScreen(newVal, oldVal) {
				const width = this.controlsWidth
				this.controlsWidth = this.controlsHeight
				this.controlsHeight = width
			}
		},
		methods: {
			// 视频播放结束后会回调该方法
			nextPlay(e) {
				if(e && e.type === 'ended') {
					const autoPlay = uni.getStorageSync('auto-play')
					if (!autoPlay) {
						uni.showModal({
							content: '是否自动播放下个视频？',
							success: (res) => {
								if(res.confirm) {
									uni.setStorageSync('auto-play', true)
								}
								this.nextPlay()
							}
						})
						return
					}
				}
				
				// 1. 获取当前章的下一节课，如果有下一节课则播放下一节课
				let chapter = this.chapterList[this.activeObj.chapterIndex]
				let section = chapter && chapter.sectionList[this.activeObj.sectionIndex + 1]
				if(section && section.videoUrl) {
					// 播放当前章的下一节课
					this.activeObj.sectionIndex++ 
					this.playSection(section)
				} else {
					chapter = this.chapterList[this.activeObj.chapterIndex + 1]
					if(chapter && chapter.sectionList && chapter.sectionList.length > 0) {
						// 2. 当前章没有下一节课，就播放下一章的第一节课
						this.activeObj.chapterIndex++
						this.activeObj.sectionIndex = 0
						section = chapter && chapter.sectionList[this.activeObj.sectionIndex]
						// 播放视频
						this.playSection(section)
					} else {
						// 3. 没有下一章，暂停视频，提示已观看到最后一节课
						videoContext.pause();
						uni.showToast({
							title: '已观看最后一节课',
							icon: 'none'
						})
						this.play = false
						this.showControls = true
					}
				}
			},
			/**
			 * 250ms触发一次该方法
			 * 获取播放进度变化，视频时长，当前时长
			 * @param {Object} event{duration: 总时长；currentTime：当前播放时长}
			 */
			timeupdate(event) {
				this.duration = event.detail.duration
				this.current = event.detail.currentTime
			},
			backHandler() {
				// 全屏，则退出全屏
				if (this.fullScreen) {
					this.fullScreenHandler()
					return
				} else {
					// 非全屏退回上一页
					uni.navigateBack()
				}
			},
			/**
			 * 播放或暂停视频
			 */
			playVideo() {
				if (this.play) {
					// 暂停
					videoContext.pause()
				} else {
					// 播放
					videoContext.play()
					// 控制按钮
					this.showHideControls()
				}
				this.play = !this.play
			},
			/**
			 * 显示或隐藏控制按钮
			 */
			showHideControls() {
				this.showControls = !this.showControls
				// 隐藏倍速视图
				this.rateView = false
				// 定时隐藏控制层
				if (this.showControls) {
					timer = timer ? clearTimeout(timer) : null
					timer = setTimeout(() => {
						this.showControls = false
					}, 3000)
				}
			},
			/**
			 * 切换或退出全屏
			 */
			fullScreenHandler() {
				if (this.fullScreen) {
					// 退出全屏
					videoContext.exitFullScreen()
				} else {
					// 切换到全屏
					videoContext.requestFullScreen()
				}
				this.fullScreen = !this.fullScreen
			},
			/**
			 * 拖动进度条结束后触发，传递当前位置的描述
			 * @param {Object} currentSecond
			 */
			change(currentSecond) {
				this.current = currentSecond
				// 跳转指定位置进行播放
				videoContext.seek(currentSecond)
			},
			/**
			 * 点击的倍速
			 * @param {Object} rate
			 */
			clickRate(rate) {
				this.currentRate = rate
				// 设置倍速率
				videoContext.playbackRate(parseFloat(rate))
				this.showHideRateView()
			},
			/**
			 * 显示隐藏倍速窗口
			 */
			showHideRateView() {
				this.rateView = !this.rateView
			},
			// course-play页面会传递数据进行触发到此方法
			videoHandlerEvent(item) {
				// console.log('接收到的数据:::', item)
				switch (item.type) {
					case 'init':
						//初始数据
						const course = item.params.course
						this.videoMidea.mainImage = course.mainImage
						this.videoMidea.id = course.id

						this.chapterList = item.params.chapterList
						this.activeObj = item.params.activeObj
						// 获取第一节课
						const chapter = this.chapterList[this.activeObj.chapterIndex]
						const section = chapter && chapter.sectionList[this.activeObj.sectionIndex]
						// console.log('section', section)
						if (section) {
							this.videoMidea.videoUrl = section.videoUrl || ''
							this.videoMidea.title = section.name
						}
						break;
					case 'change':
						// 当前播放的下标，为了播放下一节课使用
						this.activeObj = item.params.activeObj
						this.playSection(item.params.section)
						break;
					default:
						break;
				}
			},
			// 播放指定视频
			playSection(section) {
				if(section) {
					// 防止有播放的视频，先暂停再切换
					videoContext.pause()
					// 切换新课程
					this.videoMidea.videoUrl = section.videoUrl || ''
					this.videoMidea.title = section.name
					setTimeout(() => {
						videoContext.play()
						this.play = true
					}, 300)
				} else {
					uni.showToast({
						title: '视频资源不存在',
						icon: 'none'
					})
				}
				
			},
			formatSeconds(totalSecond) {
				let minute = parseInt(totalSecond / 60)
				if (minute < 10) minute = '0' + minute
				let second = parseInt(totalSecond % 60)
				if (second < 10) second = '0' + second
				let time = minute + ":" + second
				if (totalSecond >= 0) {
					return time;
				} else {
					return "00:00"
				}
			}
		}
	}
</script>

<style>
	.iconfont {
		font-family: iconfont;
		font-size: 50rpx;
		color: #FFFFFF;
	}

	.video {
		width: 750rpx;
		height: 225px;
	}

	.control-top {
		height: 90rpx;
		padding: 0 15rpx;
		align-items: center;
		background-image: linear-gradient(to top, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.8));
	}

	.title {
		color: #FFFFFF;
		font-size: 30rpx;
		width: 500rpx;
		lines: 1;
		text-overflow: ellipsis;
	}

	/* 中间区域 */
	.control-center {
		position: absolute;
		top: 90rpx;
		left: 0;
		right: 0;
		bottom: 90rpx;
		/* 添加这个背景色，防止有渐变阴影 */
		background-color: rgba(0, 0, 0, 0);
	}

	.stop {
		padding: 20rpx 35rpx;
		background-color: rgba(0, 0, 0, 0.6);
		border-radius: 10rpx;
	}

	/* 底部按钮 */
	.control-bottom {
		position: absolute;
		bottom: 0;
		height: 90rpx;
		width: 750rpx;
		background-image: linear-gradient(to top, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0));
	}

	.video-btn {
		width: 80rpx;
		line-height: 90rpx;
		text-align: center;
		color: #FFFFFF;
		font-size: 30rpx;
	}

	.time {
		font-size: 28rpx;
		color: #FFFFFF;
		width: 110rpx;
		text-align: center;
	}

	.bottom-slider {
		flex-direction: row;
		align-items: center;
		height: 90rpx;
		/* 减去固定宽度就是此进度条宽度 */
		flex: 1;
		text-align: center;
	}

	/* 非全屏倍速样式 */
	.rate-list {
		position: absolute;
		bottom: 70rpx;
		right: 40rpx;
		background-color: rgba(0, 0, 0, 0.7);
		width: 110rpx;
		border-radius: 5rpx;
	}

	.rate-item {
		color: #FFFFFF;
		font-size: 33rpx;
		line-height: 50rpx;
	}

	/* 全屏倍速样式 */
	.rate-list-full {
		width: 200rpx;
		background-color: rgba(0, 0, 0, 0.7);
		position: absolute;
		top: 0;
		right: 0;
		bottom: 0;
	}

	.rate-item-full {
		color: #FFFFFF;
		font-size: 40rpx;
		line-height: 100rpx;
	}

	.active {
		color: #345DC2;
	}
</style>
